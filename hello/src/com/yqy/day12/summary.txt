124-133

正则表达式：
    用一些规定的字符来制定规则，并用来校验数据格式的合法性

    字符串对象提供了匹配正则表达式规则的API
        对象.matches();匹配返回true

Arrays类：
    数组操作工具类，专门用于操作数组元素的

    toString();对数组进行排序
    sort();对数组进行默认升序排序
        可以使用Comparator自定义排序规则
    binarySearch()；二分查找（必须排好序的才可以用）

Lambda:
    作用：简化匿名内部类的代码写法
    （匿名内部类被重写方法的形参列表）->{
        被重写方法的方法体代码
    }
    注意：Lambda表达式只能简化函数式接口的匿名内部类的写法形式
    函数式接口：@FunctionalInterface
        必须是接口，且接口中有且仅有一个抽象方法

集合：
    体系结构：
    Collection单列集合，每个元素（数据）只包含一个值
    Map双列集合，每个元素包含两个值（键值对）

    集合中只可以存储引用类型的数据，如果要存储基本类型数据可以选用包装类

    迭代遍历：Iterator
        就是把容器中的元素访问一遍
        常用方法：
            boolean hasNext()
                询问当前位置是否有元素
            E next()
                获取当前元素并将迭代器对象移向下一个位置

    增强for循环：
        格式：
            for(元素数据类型 变量名:数组或Collection集合){
                //在此处使用变量即可，该变量就是元素
            }

ArrList集合底层原理：
    底层基于数组实现的，根据索引定位元素快，增删需要做元素的移位操作
    第一次创建集合并添加第一个元素的时候，在底层创建一个长度默认为10的数组

LinkedList集合的底层原理：
    底层数据结构是双链表，查询慢，首尾操作速度极快，所以有首尾操作的特有API

泛型：<E>
    定义泛型类的格式：public class MyArrayList<E>{ }
    泛型变量E可以随便写，如：E、T、K、V等
    作用：编译阶段可以指定数据的类型，类似于集合的作用

    定义泛型方法的格式：public <E> void show(E e){ }
    作用：方法中可以使用泛型接收一切实际类型的参数，方法更具备通用性

    定义泛型接口的格式：public interface Data<E>{ }
    作用：泛型接口可以让实现类选择当前功能需要操作的数据类型

    通配符：?
    ?可以在”使用泛型“的时候代表一切类型
    E T K V是在定义泛型的时候使用的
    泛型的上下限：
        ？extends Car：?必须是Car或者其子类 泛型上限
        ？super Car：?必须是Car或者其父类 泛型下限