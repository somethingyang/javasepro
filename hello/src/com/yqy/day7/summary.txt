93-100
static（静态）:
    修饰成员变量和成员方法。
    static修饰成员变量表示该成员变量只在内存中存储一份，可以被共享、修改。
    静态成员变量访问方式：类名.静态成员变量|对象.静态成员变量

    实例成员变量（无static修饰，存在于每个对象中）
        只能使用：对象.实例成员变量 访问

    方法同上：静态成员方法|实例成员方法

    注意事项：
        静态方法只能访问静态变量，不可以直接访问实例成员
        实例方法可以访问静态的成员，也可以访问实例成员
        静态方法中是不可以出现this关键字的（this代表当前对象）

    工具类：
        类中都是一些静态方法，每个方法都是以完成一个共用的功能为目的，这个类来给系统开发人员共同使用的。
        由于工具类都是静态方法，直接用类名进行访问，因此工具类无需创建对象，私有化工具类的构造方法可以避免创建工具类的对象，避免内存浪费

    代码块:
        类的五大成分之一（成员变量、构造器、方法、代码块、内部类），定义在类中方法外
        在Java类下，使用{}括起来的代码称为代码块

        代码块分为：
            静态代码块（用于初始化静态资源）
                格式：static{}
                特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次
                使用场景：在类加载的时候做一些静态数据初始化的操作，以便后续使用
            构造代码块
                格式：{}
                特点：每次创建对象，调用构造器执行时，都会执行该代码块中的代码，并且在构造器执行前执行
                使用场景：初始化实例资源

    设计模式：
        开发中总结出来的最优解法

        单例模式：
            可以保证系统中，应用该模式的这个类永远只有一个类，即一个类永远只能创建一个对象

            饿汉单例设计模式：
                在用类获取对象的时候，对象已经提前创建好了
                设计步骤：
                    定义一个类，把构造器私有
                    定义一个静态变量存储一个对象（只可以加载一次）

            懒汉单例设计模式：
                在真正需要该对象的时候，才去创建一个对象（延迟加载对象）。
                设计步骤：
                    定义一个类，把构造器私有
                    定义一个静态变量存储一个对象（不新建对象）
                    提供一个返回单例对象的方法